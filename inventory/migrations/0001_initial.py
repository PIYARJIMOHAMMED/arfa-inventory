# Generated by Django 5.1.5 on 2025-01-31 10:26

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Purchase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchase_order_no', models.CharField(max_length=100, unique=True)),
                ('invoice_date', models.DateField()),
                ('invoice_no', models.CharField(max_length=100, unique=True)),
                ('bill_file', models.FileField(blank=True, null=True, upload_to='uploads/vendor_bills/')),
                ('status', models.CharField(choices=[('paid', 'Paid'), ('unpaid', 'Unpaid')], default='unpaid', max_length=10)),
                ('payment_mode', models.CharField(blank=True, choices=[('cash', 'Cash'), ('upi', 'UPI'), ('card', 'Card'), ('check', 'Check')], max_length=10, null=True)),
                ('check_no', models.CharField(blank=True, max_length=50, null=True)),
                ('receiver_name', models.CharField(max_length=255)),
                ('total_amount', models.FloatField(default=0.0)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('Admin', 'Admin'), ('Manager', 'Manager')], max_length=10)),
                ('phone_number', models.CharField(max_length=15, unique=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='RawMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('category', models.CharField(choices=[('Vegetable', 'Vegetable'), ('Grocery', 'Grocery'), ('Chicken', 'Chicken'), ('Meat', 'Meat'), ('Ice', 'Ice'), ('Fruit', 'Fruit'), ('Oil', 'Oil'), ('Packaging Material', 'Packaging Material'), ('Soft Drink', 'Soft Drink'), ('Coal', 'Coal'), ('Dairy Product', 'Dairy Product'), ('Cleaning Material', 'Cleaning Material'), ('Ice Cream', 'Ice Cream'), ('Stationary', 'Stationary'), ('Repair and Maintenance', 'Repair and Maintenance'), ('Gas', 'Gas'), ('Staff Expense', 'Staff Expense')], max_length=100)),
                ('unit', models.CharField(choices=[('kg', 'Kilogram'), ('gram', 'Gram'), ('ltr', 'Liter'), ('box', 'Box'), ('10kg bag', '10kg Bag'), ('25kg bag', '25kg Bag'), ('50kg bag', '50kg Bag'), ('ml', 'Milliliter'), ('bottle', 'Bottle'), ('pkts', 'Packets'), ('can', 'Can'), ('bun', 'Bun'), ('extra', 'Extra')], max_length=50, null=True)),
                ('purchase_price', models.FloatField()),
                ('minimum_stock_level', models.FloatField()),
                ('current_stock', models.FloatField(default=0.0)),
                ('is_available', models.BooleanField(default=True)),
                ('storage', models.CharField(choices=[('Supply Room', 'Supply Room'), ('Cold Storage', 'Cold Storage')], default='Supply Room', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PurchaseItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qty', models.FloatField()),
                ('unit', models.CharField(choices=[('kg', 'Kilogram'), ('gram', 'Gram'), ('ltr', 'Liter'), ('box', 'Box'), ('5kg bag', '5kg Bag'), ('10kg bag', '10kg Bag'), ('25kg bag', '25kg Bag'), ('50kg bag', '50kg Bag'), ('ml', 'Milliliter'), ('bottle', 'Bottle'), ('pkts', 'Packets'), ('can', 'Can'), ('bun', 'Bun'), ('extra', 'Extra')], max_length=50)),
                ('price', models.FloatField()),
                ('amount', models.FloatField()),
                ('tax', models.FloatField(default=0.0)),
                ('purchase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='inventory.purchase')),
                ('raw_material', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.rawmaterial')),
            ],
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('phone', models.CharField(max_length=15)),
                ('gst_no', models.CharField(blank=True, max_length=50, null=True)),
                ('fssai_license_no', models.CharField(blank=True, max_length=50, null=True)),
                ('payment_schedule', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('fortnight', 'Fortnight'), ('monthly', 'Monthly')], default='monthly', max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('items', models.ManyToManyField(related_name='vendor_items', to='inventory.rawmaterial')),
            ],
        ),
        migrations.AddField(
            model_name='rawmaterial',
            name='vendors',
            field=models.ManyToManyField(related_name='raw_material_vendors', to='inventory.vendor'),
        ),
        migrations.AddField(
            model_name='purchase',
            name='vendor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.vendor'),
        ),
    ]
